// @ts-nocheck /* eslint-disable */ /** * * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT! * * instead, edit one of the `.graphql` files in this project and run * * npm run graphql-codegen * * for this file to be re-created */

import * as Types from '../../app/api/types.generated'

import { api } from 'src/app/services/baseApi'
module.hot?.accept()
export type GetUserDataQueryVariables = Types.Exact<{
    login: Types.Scalars['String']
    first: Types.Scalars['Int']
    after?: Types.InputMaybe<Types.Scalars['String']>
}>

export type GetUserDataQuery = {
    __typename?: 'Query'
    user?: {
        __typename?: 'User'
        id: string
        repositories: {
            __typename?: 'RepositoryConnection'
            edges?: Array<{
                __typename?: 'RepositoryEdge'
                cursor: string
                node?: { __typename?: 'Repository'; id: string; name: string }
            }>
            pageInfo: { __typename?: 'PageInfo'; hasNextPage: boolean }
        }
    }
}

export const GetUserDataDocument = `
    query GetUserData($login: String!, $first: Int!, $after: String) {
  user(login: $login) {
    id
    repositories(first: $first, privacy: PUBLIC, after: $after) {
      edges {
        cursor
        node {
          id
          name
        }
      }
      pageInfo {
        hasNextPage
      }
    }
  }
}
    `

const injectedRtkApi = api.injectEndpoints({
    overrideExisting: module.hot?.status() === 'apply',
    endpoints: (build) => ({
        GetUserData: build.query<GetUserDataQuery, GetUserDataQueryVariables>({
            query: (variables) => ({ document: GetUserDataDocument, variables }),
        }),
    }),
})

export { injectedRtkApi as api }
export const { useGetUserDataQuery, useLazyGetUserDataQuery } = injectedRtkApi
