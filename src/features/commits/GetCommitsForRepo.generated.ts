// @ts-nocheck /* eslint-disable */ /** * * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT! * * instead, edit one of the `.graphql` files in this project and run * * npm run graphql-codegen * * for this file to be re-created */

import * as Types from '../../app/services/types.generated'

import { api } from 'src/app/services/baseApi'
module.hot?.accept()
export type GetCommitsForRepoQueryVariables = Types.Exact<{
    owner: Types.Scalars['String']
    name: Types.Scalars['String']
    after?: Types.InputMaybe<Types.Scalars['String']>
}>

export type GetCommitsForRepoQuery = {
    __typename?: 'Query'
    repository?: {
        __typename?: 'Repository'
        defaultBranchRef?: {
            __typename?: 'Ref'
            target?:
                | { __typename?: 'Blob' }
                | {
                      __typename?: 'Commit'
                      history: {
                          __typename?: 'CommitHistoryConnection'
                          edges?: Array<{
                              __typename?: 'CommitEdge'
                              cursor: string
                              node?: { __typename?: 'Commit'; oid: any; message: string; url: any }
                          }>
                          pageInfo: { __typename?: 'PageInfo'; endCursor?: string; hasNextPage: boolean }
                      }
                  }
                | { __typename?: 'Tag' }
                | { __typename?: 'Tree' }
        }
    }
}

export const GetCommitsForRepoDocument = `
    query GetCommitsForRepo($owner: String!, $name: String!, $after: String) {
  repository(name: $name, owner: $owner) {
    defaultBranchRef {
      target {
        ... on Commit {
          history(first: 20, after: $after) {
            edges {
              cursor
              node {
                oid
                message
                url
              }
            }
            pageInfo {
              endCursor
              hasNextPage
            }
          }
        }
      }
    }
  }
}
    `

const injectedRtkApi = api.injectEndpoints({
    overrideExisting: module.hot?.status() === 'apply',
    endpoints: (build) => ({
        GetCommitsForRepo: build.query<GetCommitsForRepoQuery, GetCommitsForRepoQueryVariables>({
            query: (variables) => ({ document: GetCommitsForRepoDocument, variables }),
        }),
    }),
})

export { injectedRtkApi as api }
export const { useGetCommitsForRepoQuery, useLazyGetCommitsForRepoQuery } = injectedRtkApi
